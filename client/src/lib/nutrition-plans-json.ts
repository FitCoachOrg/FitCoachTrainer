// Nutrition Plans JSON Structure Compatible with Supabase nutrition_plan table
// 
// Table Structure:
// - id: bigint (auto-generated)
// - created_at: timestamp (auto-generated)
// - client_id: bigint (required - foreign key to client table)
// - food_name: text (required - name of the food item)
// - meal_type: text (required - breakfast, lunch, dinner, snack)
// - portion_size: text (optional - serving size description)
// - calories: numeric (optional - calories per serving)
// - protein: numeric (optional - protein in grams)
// - carbs: numeric (optional - carbohydrates in grams)
// - fats: numeric (optional - fats in grams)
// - fiber: numeric (optional - fiber in grams)
// - sugar: numeric (optional - sugar in grams)
// - sodium: numeric (optional - sodium in mg)
// - for_date: date (required - scheduled date)
// - for_time: time (optional - scheduled time)
// - recipe_link: text (optional - recipe or preparation link)
// - coach_tip: text (optional - nutritional coaching tip)
// - icon: text (optional - emoji or icon identifier)
// - category: text (optional - food category)
// - dietary_tags: text[] (optional - vegetarian, vegan, gluten-free, etc.)
// - meal_id: uuid (optional - unique meal identifier)

export interface NutritionPlanRecord {
  // Fields that will be auto-generated by Supabase
  id?: number;
  created_at?: string;
  
  // Required fields
  client_id: number;
  food_name: string;
  meal_type: 'breakfast' | 'lunch' | 'dinner' | 'snack';
  for_date: string; // Format: 'YYYY-MM-DD'
  
  // Optional fields
  portion_size?: string;
  calories?: number;
  protein?: number; // grams
  carbs?: number; // grams
  fats?: number; // grams
  fiber?: number; // grams
  sugar?: number; // grams
  sodium?: number; // mg
  for_time?: string; // Format: 'HH:MM:SS'
  recipe_link?: string;
  coach_tip?: string;
  icon?: string;
  category?: string;
  dietary_tags?: string[];
  meal_id?: string; // UUID for unique identification
}

// Example nutrition plans ready for database insertion
export const sampleNutritionPlans: NutritionPlanRecord[] = [
  // Breakfast Items
  {
    client_id: 1, // Replace with actual client ID
    food_name: "Oatmeal with berries",
    meal_type: "breakfast",
    portion_size: "1 cup oats + 1/2 cup mixed berries",
    calories: 320,
    protein: 12,
    carbs: 58,
    fats: 6,
    fiber: 8,
    sugar: 15,
    sodium: 5,
    for_date: "2024-01-15",
    for_time: "07:30:00",
    recipe_link: "https://example.com/oatmeal-recipe",
    coach_tip: "Rich in fiber and antioxidants, perfect for sustained energy",
    icon: "🥣",
    category: "whole_grains",
    dietary_tags: ["vegetarian", "gluten-free"],
    meal_id: "550e8400-e29b-41d4-a716-446655440101"
  },
  {
    client_id: 1,
    food_name: "Greek yogurt",
    meal_type: "breakfast",
    portion_size: "1 cup (170g)",
    calories: 150,
    protein: 20,
    carbs: 8,
    fats: 4,
    fiber: 0,
    sugar: 8,
    sodium: 65,
    for_date: "2024-01-15",
    for_time: "07:35:00",
    recipe_link: "https://example.com/greek-yogurt-benefits",
    coach_tip: "High protein content helps with muscle recovery and satiety",
    icon: "🥛",
    category: "dairy",
    dietary_tags: ["vegetarian", "high-protein"],
    meal_id: "550e8400-e29b-41d4-a716-446655440102"
  },
  {
    client_id: 1,
    food_name: "Banana",
    meal_type: "breakfast",
    portion_size: "1 medium banana (118g)",
    calories: 105,
    protein: 1,
    carbs: 27,
    fats: 0,
    fiber: 3,
    sugar: 14,
    sodium: 1,
    for_date: "2024-01-15",
    for_time: "07:40:00",
    recipe_link: "https://example.com/banana-nutrition",
    coach_tip: "Natural sugars provide quick energy, potassium supports muscle function",
    icon: "🍌",
    category: "fruits",
    dietary_tags: ["vegan", "gluten-free", "natural"],
    meal_id: "550e8400-e29b-41d4-a716-446655440103"
  },

  // Lunch Items
  {
    client_id: 1,
    food_name: "Grilled chicken breast",
    meal_type: "lunch",
    portion_size: "150g (5oz)",
    calories: 280,
    protein: 53,
    carbs: 0,
    fats: 6,
    fiber: 0,
    sugar: 0,
    sodium: 125,
    for_date: "2024-01-15",
    for_time: "12:30:00",
    recipe_link: "https://example.com/grilled-chicken-recipe",
    coach_tip: "Lean protein source, essential for muscle building and repair",
    icon: "🍗",
    category: "lean_protein",
    dietary_tags: ["high-protein", "low-carb"],
    meal_id: "550e8400-e29b-41d4-a716-446655440104"
  },
  {
    client_id: 1,
    food_name: "Quinoa salad",
    meal_type: "lunch",
    portion_size: "1 cup cooked quinoa with vegetables",
    calories: 220,
    protein: 8,
    carbs: 39,
    fats: 4,
    fiber: 5,
    sugar: 2,
    sodium: 15,
    for_date: "2024-01-15",
    for_time: "12:35:00",
    recipe_link: "https://example.com/quinoa-salad-recipe",
    coach_tip: "Complete protein grain with all essential amino acids",
    icon: "🥗",
    category: "whole_grains",
    dietary_tags: ["vegan", "gluten-free", "complete-protein"],
    meal_id: "550e8400-e29b-41d4-a716-446655440105"
  },
  {
    client_id: 1,
    food_name: "Mixed vegetables",
    meal_type: "lunch",
    portion_size: "1 cup steamed mixed vegetables",
    calories: 80,
    protein: 3,
    carbs: 16,
    fats: 1,
    fiber: 6,
    sugar: 8,
    sodium: 25,
    for_date: "2024-01-15",
    for_time: "12:40:00",
    recipe_link: "https://example.com/steamed-vegetables",
    coach_tip: "High in vitamins, minerals, and fiber for optimal health",
    icon: "🥕",
    category: "vegetables",
    dietary_tags: ["vegan", "low-calorie", "nutrient-dense"],
    meal_id: "550e8400-e29b-41d4-a716-446655440106"
  },

  // Snack Items
  {
    client_id: 1,
    food_name: "Mixed nuts",
    meal_type: "snack",
    portion_size: "1 oz (28g)",
    calories: 170,
    protein: 6,
    carbs: 6,
    fats: 15,
    fiber: 3,
    sugar: 1,
    sodium: 0,
    for_date: "2024-01-15",
    for_time: "15:30:00",
    recipe_link: "https://example.com/healthy-nuts",
    coach_tip: "Healthy fats and protein for sustained energy between meals",
    icon: "🥜",
    category: "nuts_seeds",
    dietary_tags: ["vegan", "keto-friendly", "healthy-fats"],
    meal_id: "550e8400-e29b-41d4-a716-446655440107"
  },
  {
    client_id: 1,
    food_name: "Apple",
    meal_type: "snack",
    portion_size: "1 medium apple (182g)",
    calories: 95,
    protein: 0,
    carbs: 25,
    fats: 0,
    fiber: 4,
    sugar: 19,
    sodium: 2,
    for_date: "2024-01-15",
    for_time: "15:35:00",
    recipe_link: "https://example.com/apple-nutrition",
    coach_tip: "Natural fiber helps with digestion and blood sugar control",
    icon: "🍎",
    category: "fruits",
    dietary_tags: ["vegan", "low-calorie", "natural"],
    meal_id: "550e8400-e29b-41d4-a716-446655440108"
  },
  {
    client_id: 1,
    food_name: "Protein shake",
    meal_type: "snack",
    portion_size: "1 scoop whey protein + water",
    calories: 120,
    protein: 25,
    carbs: 3,
    fats: 1,
    fiber: 0,
    sugar: 2,
    sodium: 75,
    for_date: "2024-01-15",
    for_time: "15:40:00",
    recipe_link: "https://example.com/protein-shake-recipes",
    coach_tip: "Quick protein absorption for post-workout recovery",
    icon: "🥤",
    category: "supplements",
    dietary_tags: ["high-protein", "post-workout"],
    meal_id: "550e8400-e29b-41d4-a716-446655440109"
  },

  // Dinner Items
  {
    client_id: 1,
    food_name: "Salmon fillet",
    meal_type: "dinner",
    portion_size: "150g (5oz)",
    calories: 350,
    protein: 39,
    carbs: 0,
    fats: 20,
    fiber: 0,
    sugar: 0,
    sodium: 90,
    for_date: "2024-01-15",
    for_time: "19:00:00",
    recipe_link: "https://example.com/baked-salmon-recipe",
    coach_tip: "Rich in omega-3 fatty acids for heart and brain health",
    icon: "🐟",
    category: "fatty_fish",
    dietary_tags: ["high-protein", "omega-3", "heart-healthy"],
    meal_id: "550e8400-e29b-41d4-a716-446655440110"
  },
  {
    client_id: 1,
    food_name: "Sweet potato",
    meal_type: "dinner",
    portion_size: "1 medium baked sweet potato (150g)",
    calories: 180,
    protein: 4,
    carbs: 41,
    fats: 0,
    fiber: 6,
    sugar: 12,
    sodium: 8,
    for_date: "2024-01-15",
    for_time: "19:05:00",
    recipe_link: "https://example.com/baked-sweet-potato",
    coach_tip: "Complex carbohydrates and beta-carotene for sustained energy",
    icon: "🍠",
    category: "starchy_vegetables",
    dietary_tags: ["vegan", "complex-carbs", "vitamin-a"],
    meal_id: "550e8400-e29b-41d4-a716-446655440111"
  },
  {
    client_id: 1,
    food_name: "Steamed broccoli",
    meal_type: "dinner",
    portion_size: "1 cup chopped (91g)",
    calories: 55,
    protein: 6,
    carbs: 11,
    fats: 1,
    fiber: 5,
    sugar: 2,
    sodium: 33,
    for_date: "2024-01-15",
    for_time: "19:10:00",
    recipe_link: "https://example.com/steamed-broccoli",
    coach_tip: "High in vitamin C and folate, supports immune function",
    icon: "🥦",
    category: "cruciferous_vegetables",
    dietary_tags: ["vegan", "low-calorie", "vitamin-c"],
    meal_id: "550e8400-e29b-41d4-a716-446655440112"
  }
];

// Function to convert a nutrition plan to database format
export function convertToNutritionPlanRecord(
  clientId: number,
  nutritionPlan: any,
  scheduledDate: string,
  scheduledTime?: string
): NutritionPlanRecord[] {
  const records: NutritionPlanRecord[] = [];
  
  // Process each meal type
  Object.keys(nutritionPlan).forEach(mealType => {
    if (Array.isArray(nutritionPlan[mealType])) {
      nutritionPlan[mealType].forEach((food: any, index: number) => {
        // Calculate time offset for multiple items in same meal
        const timeOffset = index * 5; // 5 minutes apart
        const itemTime = scheduledTime 
          ? addMinutesToTime(scheduledTime, timeOffset)
          : undefined;
          
        const record: NutritionPlanRecord = {
          client_id: clientId,
          food_name: food.name || food.food_name,
          meal_type: mealType as 'breakfast' | 'lunch' | 'dinner' | 'snack',
          for_date: scheduledDate,
          for_time: itemTime,
          portion_size: food.portion_size || food.portion,
          calories: food.calories,
          protein: food.protein,
          carbs: food.carbs,
          fats: food.fats,
          fiber: food.fiber,
          sugar: food.sugar,
          sodium: food.sodium,
          recipe_link: food.recipe_link,
          coach_tip: food.coach_tip,
          icon: food.icon,
          category: food.category,
          dietary_tags: food.dietary_tags,
          meal_id: food.meal_id || generateUUID()
        };
        
        records.push(record);
      });
    }
  });
  
  return records;
}

// Helper function to add minutes to time string
function addMinutesToTime(timeString: string, minutes: number): string {
  const [hours, mins, seconds] = timeString.split(':').map(Number);
  const totalMinutes = hours * 60 + mins + minutes;
  const newHours = Math.floor(totalMinutes / 60) % 24;
  const newMinutes = totalMinutes % 60;
  return `${newHours.toString().padStart(2, '0')}:${newMinutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// Helper function to generate UUID
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// Database operations for nutrition plans
export async function insertNutritionPlans(
  supabaseClient: any,
  nutritionPlans: NutritionPlanRecord[]
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('nutrition_plan')
      .insert(nutritionPlans)
      .select();
    
    return { data, error };
  } catch (error) {
    return { data: null, error };
  }
}

// Fetch nutrition plans for a client
export async function fetchNutritionPlans(
  supabaseClient: any,
  clientId: number,
  startDate?: string,
  endDate?: string
): Promise<{ data: NutritionPlanRecord[]; error: any }> {
  try {
    let query = supabaseClient
      .from('nutrition_plan')
      .select('*')
      .eq('client_id', clientId);
    
    if (startDate) {
      query = query.gte('for_date', startDate);
    }
    
    if (endDate) {
      query = query.lte('for_date', endDate);
    }
    
    const { data, error } = await query
      .order('for_date', { ascending: true })
      .order('for_time', { ascending: true });
    
    return { data: data || [], error };
  } catch (error) {
    return { data: [], error };
  }
}

// Update a nutrition plan
export async function updateNutritionPlan(
  supabaseClient: any,
  nutritionPlanId: number,
  updates: Partial<NutritionPlanRecord>
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('nutrition_plan')
      .update(updates)
      .eq('id', nutritionPlanId)
      .select();
    
    return { data, error };
  } catch (error) {
    return { data: null, error };
  }
}

// Delete a nutrition plan
export async function deleteNutritionPlan(
  supabaseClient: any,
  nutritionPlanId: number
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('nutrition_plan')
      .delete()
      .eq('id', nutritionPlanId);
    
    return { data, error };
  } catch (error) {
    return { data: null, error };
  }
}

// Get nutrition summary for a date range
export async function getNutritionSummary(
  supabaseClient: any,
  clientId: number,
  startDate: string,
  endDate: string
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('nutrition_plan')
      .select('for_date, calories, protein, carbs, fats, fiber')
      .eq('client_id', clientId)
      .gte('for_date', startDate)
      .lte('for_date', endDate);
    
    if (error) return { data: null, error };
    
    // Group by date and calculate totals
    const summary = data.reduce((acc: any, item: any) => {
      const date = item.for_date;
      if (!acc[date]) {
        acc[date] = {
          date,
          total_calories: 0,
          total_protein: 0,
          total_carbs: 0,
          total_fats: 0,
          total_fiber: 0
        };
      }
      
      acc[date].total_calories += item.calories || 0;
      acc[date].total_protein += item.protein || 0;
      acc[date].total_carbs += item.carbs || 0;
      acc[date].total_fats += item.fats || 0;
      acc[date].total_fiber += item.fiber || 0;
      
      return acc;
    }, {});
    
    return { data: Object.values(summary), error: null };
  } catch (error) {
    return { data: null, error };
  }
} 