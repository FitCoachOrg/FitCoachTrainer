// Workout Plans JSON Structure Compatible with Supabase workout_plan table
// 
// Table Structure:
// - id: bigint (auto-generated)
// - created_at: timestamp (auto-generated)
// - client_id: bigint (required - foreign key to client table)
// - workout: text (required - exercise name)
// - duration: numeric (optional - duration in minutes)
// - sets: numeric (optional - number of sets)
// - reps: numeric (optional - number of reps)
// - weights: text (optional - weight used)
// - for_date: date (required - scheduled date)
// - for_time: time (optional - scheduled time)
// - workout_yt_link: text (optional - YouTube tutorial link)
// - coach_tip: text (optional - coaching tip)
// - icon: text (optional - emoji or icon identifier)
// - category: text (optional - workout category)
// - body_part: text (optional - target body part)
// - workout_id: uuid (optional - unique workout identifier)

export interface WorkoutPlanRecord {
  // Fields that will be auto-generated by Supabase
  id?: number;
  created_at?: string;
  
  // Required fields
  client_id: number;
  workout: string;
  for_date: string; // Format: 'YYYY-MM-DD'
  
  // Optional fields
  duration?: number; // Duration in minutes
  sets?: number;
  reps?: number;
  weights?: string;
  for_time?: string; // Format: 'HH:MM:SS'
  workout_yt_link?: string;
  coach_tip?: string;
  icon?: string;
  category?: string;
  body_part?: string;
  workout_id?: string; // UUID for unique identification
}

// Example workout plans ready for database insertion
export const sampleWorkoutPlans: WorkoutPlanRecord[] = [
  // Upper Body Strength Plan
  {
    client_id: 1, // Replace with actual client ID
    workout: "Bench Press",
    duration: 3,
    sets: 4,
    reps: 10,
    weights: "70kg",
    for_date: "2024-01-15",
    for_time: "09:00:00",
    workout_yt_link: "https://youtube.com/watch?v=bench-press-tutorial",
    coach_tip: "Keep your core engaged and maintain proper form throughout the movement",
    icon: "💪",
    category: "strength",
    body_part: "chest",
    workout_id: "550e8400-e29b-41d4-a716-446655440001"
  },
  {
    client_id: 1,
    workout: "Pull-ups",
    duration: 2.5,
    sets: 3,
    reps: 12,
    weights: "bodyweight",
    for_date: "2024-01-15",
    for_time: "09:05:00",
    workout_yt_link: "https://youtube.com/watch?v=pullups-tutorial",
    coach_tip: "Focus on controlled movement, engage your lats",
    icon: "🏋️",
    category: "strength",
    body_part: "back",
    workout_id: "550e8400-e29b-41d4-a716-446655440002"
  },
  {
    client_id: 1,
    workout: "Shoulder Press",
    duration: 2,
    sets: 3,
    reps: 12,
    weights: "20kg dumbbells",
    for_date: "2024-01-15",
    for_time: "09:10:00",
    workout_yt_link: "https://youtube.com/watch?v=shoulder-press-tutorial",
    coach_tip: "Keep shoulders stable, press straight up",
    icon: "🏋️‍♀️",
    category: "strength",
    body_part: "shoulders",
    workout_id: "550e8400-e29b-41d4-a716-446655440003"
  },

  // Lower Body Power Plan
  {
    client_id: 1,
    workout: "Squats",
    duration: 4,
    sets: 4,
    reps: 12,
    weights: "90kg barbell",
    for_date: "2024-01-17",
    for_time: "10:00:00",
    workout_yt_link: "https://youtube.com/watch?v=squats-tutorial",
    coach_tip: "Keep chest up, knees tracking over toes",
    icon: "🏋️",
    category: "strength",
    body_part: "legs",
    workout_id: "550e8400-e29b-41d4-a716-446655440004"
  },
  {
    client_id: 1,
    workout: "Deadlifts",
    duration: 4,
    sets: 3,
    reps: 8,
    weights: "100kg barbell",
    for_date: "2024-01-17",
    for_time: "10:05:00",
    workout_yt_link: "https://youtube.com/watch?v=deadlifts-tutorial",
    coach_tip: "Keep bar close to body, drive through heels",
    icon: "🏋️‍♂️",
    category: "strength",
    body_part: "full_body",
    workout_id: "550e8400-e29b-41d4-a716-446655440005"
  },

  // HIIT Cardio Plan
  {
    client_id: 1,
    workout: "Burpees",
    duration: 0.5,
    sets: 4,
    reps: 30, // 30 seconds
    weights: "bodyweight",
    for_date: "2024-01-19",
    for_time: "08:00:00",
    workout_yt_link: "https://youtube.com/watch?v=burpees-tutorial",
    coach_tip: "Maintain form even when tired, full body engagement",
    icon: "🔥",
    category: "cardio",
    body_part: "full_body",
    workout_id: "550e8400-e29b-41d4-a716-446655440006"
  },
  {
    client_id: 1,
    workout: "Mountain Climbers",
    duration: 0.5,
    sets: 4,
    reps: 30,
    weights: "bodyweight",
    for_date: "2024-01-19",
    for_time: "08:05:00",
    workout_yt_link: "https://youtube.com/watch?v=mountain-climbers-tutorial",
    coach_tip: "Keep core tight, rapid alternating movement",
    icon: "⛰️",
    category: "cardio",
    body_part: "core",
    workout_id: "550e8400-e29b-41d4-a716-446655440007"
  },

  // Flexibility & Recovery Plan
  {
    client_id: 1,
    workout: "Cat-Cow Stretch",
    duration: 2,
    sets: 3,
    reps: 15,
    weights: "bodyweight",
    for_date: "2024-01-21",
    for_time: "07:00:00",
    workout_yt_link: "https://youtube.com/watch?v=cat-cow-tutorial",
    coach_tip: "Slow, controlled movement, feel the stretch",
    icon: "🐱",
    category: "flexibility",
    body_part: "spine",
    workout_id: "550e8400-e29b-41d4-a716-446655440008"
  },
  {
    client_id: 1,
    workout: "Downward Dog",
    duration: 1.5,
    sets: 3,
    reps: 30, // 30 seconds hold
    weights: "bodyweight",
    for_date: "2024-01-21",
    for_time: "07:05:00",
    workout_yt_link: "https://youtube.com/watch?v=downward-dog-tutorial",
    coach_tip: "Press hands down, lengthen spine",
    icon: "🐕",
    category: "flexibility",
    body_part: "full_body",
    workout_id: "550e8400-e29b-41d4-a716-446655440009"
  }
];

// Function to convert a workout plan to database format
export function convertWorkoutPlanToDbFormat(
  clientId: number,
  workoutPlan: any,
  scheduledDate: string,
  scheduledTime?: string
): WorkoutPlanRecord[] {
  return workoutPlan.exercises.map((exercise: any, index: number) => ({
    client_id: clientId,
    workout: exercise.workout,
    duration: exercise.duration,
    sets: exercise.sets,
    reps: typeof exercise.reps === 'string' ? parseInt(exercise.reps.split('-')[0]) : exercise.reps,
    weights: exercise.weights,
    for_date: scheduledDate,
    for_time: scheduledTime || `09:${(index * 5).toString().padStart(2, '0')}:00`,
    workout_yt_link: exercise.workout_yt_link,
    coach_tip: exercise.coach_tip,
    icon: exercise.icon,
    category: exercise.category,
    body_part: exercise.body_part,
    workout_id: `550e8400-e29b-41d4-a716-${Date.now().toString().padStart(12, '0').slice(-12)}`
  }));
}

// Function to insert workout plans into Supabase
export async function insertWorkoutPlans(
  supabaseClient: any,
  workoutPlans: WorkoutPlanRecord[]
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('workout_plan')
      .insert(workoutPlans)
      .select();
    
    return { data, error };
  } catch (err) {
    return { data: null, error: err };
  }
}

// Function to fetch workout plans for a specific client and date range
export async function fetchWorkoutPlans(
  supabaseClient: any,
  clientId: number,
  startDate?: string,
  endDate?: string
): Promise<{ data: WorkoutPlanRecord[]; error: any }> {
  try {
    let query = supabaseClient
      .from('workout_plan')
      .select('*')
      .eq('client_id', clientId);
    
    if (startDate) {
      query = query.gte('for_date', startDate);
    }
    
    if (endDate) {
      query = query.lte('for_date', endDate);
    }
    
    query = query.order('for_date', { ascending: true })
                 .order('for_time', { ascending: true });
    
    const { data, error } = await query;
    
    return { data: data || [], error };
  } catch (err) {
    return { data: [], error: err };
  }
}

// Function to update a workout plan
export async function updateWorkoutPlan(
  supabaseClient: any,
  workoutPlanId: number,
  updates: Partial<WorkoutPlanRecord>
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('workout_plan')
      .update(updates)
      .eq('id', workoutPlanId)
      .select();
    
    return { data, error };
  } catch (err) {
    return { data: null, error: err };
  }
}

// Function to delete a workout plan
export async function deleteWorkoutPlan(
  supabaseClient: any,
  workoutPlanId: number
): Promise<{ data: any; error: any }> {
  try {
    const { data, error } = await supabaseClient
      .from('workout_plan')
      .delete()
      .eq('id', workoutPlanId);
    
    return { data, error };
  } catch (err) {
    return { data: null, error: err };
  }
}

// Example usage:
/*
// 1. Convert a recommended workout plan to database format
const dbWorkouts = convertWorkoutPlanToDbFormat(
  123, // client_id
  recommendedPlans[0], // workout plan object
  '2024-01-15', // scheduled date
  '09:00:00' // scheduled time (optional)
);

// 2. Insert into database
const { data, error } = await insertWorkoutPlans(supabaseClient, dbWorkouts);

// 3. Fetch workout plans for a client
const { data: workouts, error: fetchError } = await fetchWorkoutPlans(
  supabaseClient,
  123, // client_id
  '2024-01-01', // start date (optional)
  '2024-01-31'  // end date (optional)
);

// 4. Update a workout plan
const { data: updated, error: updateError } = await updateWorkoutPlan(
  supabaseClient,
  1, // workout plan id
  { weights: '75kg', coach_tip: 'Updated coaching tip' }
);

// 5. Delete a workout plan
const { data: deleted, error: deleteError } = await deleteWorkoutPlan(
  supabaseClient,
  1 // workout plan id
);
*/ 